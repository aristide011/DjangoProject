# Generated by Django 5.2 on 2025-06-14 21:46

from django.db import migrations
from django.contrib.auth.models import Group ,Permission
from django.contrib.contenttypes.models import ContentType
from django.apps import apps
from music_streaming.models import Playlist, Recommendations


def create_user_groups(apps,schema_editor):
    Song=apps.get_model('music_streaming','Song')
    Playlist=apps.get_model('music_streaming','Playlist')
    Recommendations=apps.get_model('music_streaming','recommendations')

    song_content_type=ContentType.objects.get_for_model(Song)
    playlist_content_type=ContentType.objects.get_for_model(Playlist)
    recommendation_content_type=ContentType.objects.get_for_model(Recommendations)


    #Creo gruppo Listener
    listener_group, created=Group.objects.get_or_create(name='Listener')
    listener_permissions =[
        'view_song',
        'add_playlist',
        'change_playlist',
        'delete_playlist',
        'view_recommendations'
    ]

    for perm in listener_permissions:
        content_type=None
        if perm=='view_recommendations':
            content_type=recommendation_content_type
        elif perm in ['change_playlist','delete_playlist','view_recommendations']:
            content_type=playlist_content_type
        else:
            content_type=song_content_type
        try:
            permission = Permission.objects.get(codename=perm, content_type=content_type)
        except Permission.DoesNotExist:
            permission = Permission.objects.create(
                codename=perm,
                name=f'Can {perm.replace("_", " ")}',
                content_type=content_type
            )

        listener_group.permissions.add(permission)







    #creo  gruppo Curator
    curator_group, created=Group.objects.get_or_create(name='Curator')
    curator_permissions=[
        'add_song',
        'change_song',
        'delete_song',
        'view_song'
    ] + listener_permissions #include tutti i permessi del listener

    for perm in curator_permissions:
        content_type=None
        if perm in ['add_song','change_song','delete_song','view_song']:
            content_type=song_content_type
        elif perm in ['add_playlist','change_playlist','delete_playlist'] :
            content_type=playlist_content_type
        else:
            content_type=recommendation_content_type

        try:
            permission = Permission.objects.get(codename=perm, content_type=content_type)
        except Permission.DoesNotExist:
            permission = Permission.objects.create(
                codename=perm,
                name=f'Can {perm.replace("_", " ")}',
                content_type=content_type
            )

        curator_group.permissions.add(permission)

class Migration(migrations.Migration):

    dependencies = [
        ("users", "0001_initial"),
        ("music_streaming","0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_user_groups)
    ]
